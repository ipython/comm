[build-system]
requires = ["hatchling>=1.10"]
build-backend = "hatchling.build"

[project]
name = "comm"
dynamic = ["version"]
description = "Jupyter Python Comm implementation, for usage in ipykernel, xeus-python etc."
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.8"
authors = [
    { name = "Jupyter contributors" },
]
keywords = [
    "ipykernel",
    "jupyter",
    "xeus-python",
]
classifiers = [
    "Framework :: Jupyter",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "traitlets>=4",
]

[project.optional-dependencies]
test = [
  "pytest",
]

[project.urls]
Homepage = "https://github.com/ipython/comm"

[tool.hatch.version]
path = "comm/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/comm",
]

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
dependencies = ["pre-commit"]
detached = true
[tool.hatch.envs.typing.scripts]
test = "pre-commit run --all-files --hook-stage manual mypy"

[tool.hatch.envs.lint]
dependencies = ["pre-commit"]
detached = true
[tool.hatch.envs.lint.scripts]
build = [
  "pre-commit run --all-files ruff",
  "pre-commit run --all-files ruff-format"
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-raXs", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config"
]
filterwarnings = ["error"]

[tool.mypy]
files = "comm"
python_version = "3.8"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PTH",         # flake8-use-pathlib
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
  "S",           # flake8-bandit
]
ignore = [
  "PLR",    # Design related pylint codes
  "S101",   # Use of `assert` detected
  "G201"    # Logging `.exception(...)` should be used instead
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = []

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.repo-review]
ignore = ["PP308", "PY004", "GH102", "MY101", "RTD100"]
